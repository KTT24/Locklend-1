<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Improbable.Worker.CInterop</name>
    </assembly>
    <members>
        <member name="T:Improbable.Worker.CInterop.ComponentData">
            <summary>
            Represents data-at-rest for a component identified by the ComponentId.
            Underlying binary data format can be either raw SchemaData or UserHandle
            controlled entirely by user.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.ComponentData.Acquire">
             <summary>
             Acquire a reference to extend the lifetime of some component data managed by the SDK, by
             returning a new component data container object _not_ managed by the SDK. The data
             contained within the object will be identical to the original data, but it is not safe
             to mutate the contained data without explicitly copying it first. The lifetime of the
             original container object is unchanged.
            
             You must call <c>.Release()</c> on the new object once you are done using it, otherwise
             memory will leak.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Thrown if the ComponentData is not owned by the SDK.
             </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.ComponentData.Release">
            <summary>
            Releases an object returned after calling <c>.Acquire()</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the ComponentData is not owned by the SDK.
            </exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.ComponentUpdate">
            <summary>
            Represents an update for the component identified by the ComponentId.
            Underlying binary data format can be either raw SchemaData or some UserHandle
            controlled entirely by user.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.ComponentUpdate.Acquire">
             <summary>
             Acquire a reference to extend the lifetime of a component update managed by the SDK, by
             returning a new component update container object _not_ managed by the SDK. The data
             contained within the object will be identical to the original data, but it is not safe
             to mutate the contained data without explicitly copying it first. The lifetime of the
             original container object is unchanged.
            
             You must call <c>.Release()</c> on the new object once you are done using it, otherwise
             memory will leak.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Thrown if the ComponentUpdate is not owned by the SDK.
             </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.ComponentUpdate.Release">
            <summary>
            Releases an object returned after calling <c>.Acquire()</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the ComponentUpdate is not owned by the SDK.
            </exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.CommandRequest">
            <summary>
            Represents a command request for a component identified by the ComponentId.
            Underlying binary data format can be either raw SchemaData or UserHandle
            controlled entirely by user.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.CommandRequest.Acquire">
             <summary>
             Acquire a reference to extend the lifetime of a command request managed by the SDK, by
             returning a new command request container object _not_ managed by the SDK. The data
             contained within the object will be identical to the original data, but it is not safe
             to mutate the contained data without explicitly copying it first. The lifetime of the
             original container object is unchanged.
            
             You must call <c>.Release()</c> on the new object once you are done using it, otherwise
             memory will leak.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Thrown if the CommandRequest is not owned by the SDK.
             </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.CommandRequest.Release">
            <summary>
            Releases an object returned after calling <c>.Acquire()</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the CommandRequest is not owned by the SDK.
            </exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.CommandResponse">
            <summary>
            Represents a command response for a component identified by the ComponentId.
            Underlying binary data format can be either raw SchemaData or UserHandle
            controlled entirely by user.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.CommandResponse.Acquire">
             <summary>
             Acquire a reference to extend the lifetime of a command response managed by the SDK, by
             returning a new command response container object _not_ managed by the SDK. The data
             contained within the object will be identical to the original data, but it is not safe
             to mutate the contained data without explicitly copying it first. The lifetime of the
             original container object is unchanged.
            
             You must call <c>.Release()</c> on the new object once you are done using it, otherwise
             memory will leak.
             </summary>
             <exception cref="T:System.InvalidOperationException">
             Thrown if the CommandResponse is not owned by the SDK.
             </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.CommandResponse.Release">
            <summary>
            Releases an object returned after calling <c>.Acquire()</c>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the CommandResponse is not owned by the SDK.
            </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.Connection.Dispose">
            <inheritdoc cref="T:System.IDisposable"/>
        </member>
        <member name="T:Improbable.Worker.CInterop.Constants">
            <summary>
            A struct to contain constants that can be shared in Improbable.Worker.CInterop.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Constants.WorkerLibrary">
            <summary>
            Constant used to alter between static/dynamic linking.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenResponse">
            <summary>
            The result of creating a player identity token.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenResponse.PlayerIdentityToken">
            <summary>
            The returned player identity token.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenResponse.Status">
            <summary>
            The status code and a human-readable description of the status of the request.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.Alpha.LoginTokenDetails">
            <summary>
            A single login token with additional details.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokenDetails.DeploymentId">
            <summary>
            The UUID of the deployment.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokenDetails.DeploymentName">
            <summary>
            The name of the deployment.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokenDetails.Tags">
            <summary>
            The tags that the deployment contains.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokenDetails.LoginToken">
            <summary>
            The generated login token for this deployment.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.Alpha.LoginTokensResponse">
            <summary>
            A login token list obtained via CreateDevelopmentLoginTokensListAsync.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokensResponse.LoginTokens">
            <summary>
            The list of login tokens.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokensResponse.Status">
            <summary>
            The status code and a human-readable description of the status of the request.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.Alpha.DevelopmentAuthentication.CreateDevelopmentPlayerIdentityTokenAsync(System.String,System.UInt16,Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest)">
            <summary>
            Calls the Development Authentication Service to generate a player identity token.
            </summary>
            <param name="hostname">The hostname of the Development Authentication Service.
            Typically "locator.improbable.io".</param>
            <param name="port">The port number used to connect to the Development Authentication
            Service. Typically 444. </param>
            <param name="request">The request to send to the Development Authentication
            Service.</param>
            <returns>A future object for the player identity token response.</returns>
        </member>
        <member name="M:Improbable.Worker.CInterop.Alpha.DevelopmentAuthentication.CreateDevelopmentLoginTokensAsync(System.String,System.UInt16,Improbable.Worker.CInterop.Alpha.LoginTokensRequest)">
            <summary>
            Calls the Development Login Service to generate login tokens.
            </summary>
            <param name="hostname">The hostname of the Development Login Service.
            Typically "locator.improbable.io".</param>
            <param name="port">The port number used to connect to the Development Login
            Service. Typically 444. </param>
            <param name="request">The request to send to the Development Login
            Service.</param>
            <returns>A future object for the login tokens response.</returns>
        </member>
        <member name="T:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest">
            <summary>
            The parameters used when creating a player identity token.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest.DevelopmentAuthenticationToken">
            <summary>
            The Development Authentication Token used for exchanging the player identity
            token.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest.PlayerId">
            <summary>
            The ID of the player we are generating a player identity token for.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest.DurationSeconds">
            <summary>
            The lifetime duration of the requested player identity token. This is an optional field.
            If null, a default value of 24 hours will be used.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest.DisplayName">
            <summary>
            The player's display name. This is an optional field.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest.Metadata">
            <summary>
            Additional metadata that can be stored in the player identity token. This is an optional field.
            You can use this to securely attach extra attributes in a format you choose (e.g. JSON payload).
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.PlayerIdentityTokenRequest.UseInsecureConnection">
            <summary>
            Whether to use an insecure (non-TLS) connection for local development.
            An insecure connection must be used when connecting to a local development authentication service.
            A secure connection must be used when connecting to a cloud development authentication service.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokensRequest.PlayerIdentityToken">
            <summary>
            The player identity token of the player.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokensRequest.DurationSeconds">
            <summary>
            The lifetime duration of the requested login tokens. This is an optional field.
            If null, a default value of 15 minutes will be used.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokensRequest.WorkerType">
            <summary>
            The worker type for which the requested login tokens are scoped for.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Alpha.LoginTokensRequest.UseInsecureConnection">
            <summary>
            Whether to use an insecure (non-TLS) connection for local development.
            An insecure connection must be used when connecting to a local development login service.
            A secure connection must be used when connecting to a cloud development login service.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.Future`1">
            <summary>
            A class representing the standard future concept. It can be used for both synchronous
            and asynchronous interaction.
            </summary>
            <typeparam name="T">The type of object the future returns.</typeparam>
        </member>
        <member name="M:Improbable.Worker.CInterop.Future`1.Dispose">
            <inheritdoc cref="T:System.IDisposable"/>
        </member>
        <member name="M:Improbable.Worker.CInterop.Future`1.Get">
            <summary>
            Waits until the result becomes available, and returns it. If the result was already
            obtained by a previous call to Get() or Get(timeoutMillis), this function returns it
            immediately.
            </summary>
            <returns>The result.</returns>
        </member>
        <member name="M:Improbable.Worker.CInterop.Future`1.TryGet(`0@,System.UInt32)">
            <summary>
            Checks if the result is available. If the result is available, this function returns
            true and the result will be stored in the out parameter. Otherwise, the function
            returns false.
            </summary>
            <param name="result">The result of the future if it has finished.</param>
            <param name="timeoutMillis">
            An optional time to wait for the result to become available.
            </param>
            <returns>True if the result is available, false otherwise.</returns>
        </member>
        <member name="M:Improbable.Worker.CInterop.Locator.Dispose">
            <inheritdoc cref="T:System.IDisposable"/>
        </member>
        <member name="M:Improbable.Worker.CInterop.Locator.ConnectAsync(System.String,Improbable.Worker.CInterop.ConnectionParameters,System.Func{Improbable.Worker.CInterop.QueueStatus,System.Boolean})">
            <remark>
            Ensure that the QueueStatus callback does not throw an exception. Otherwise, a fatal
            crash may occur.
            </remark>
        </member>
        <member name="M:Improbable.Worker.CInterop.OpList.Dispose">
            <inheritdoc cref="T:System.IDisposable"/>
        </member>
        <member name="T:Improbable.Worker.CInterop.ComponentVtable">
            <summary>
            Acts as a container of function callbacks which are called by the network threads when
            component data needs to be serialized or deserialized. You should ensure that no exceptions
            are thrown from any of these callbacks, as this can cause a crash in the native thread.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.ConnectionParameters.ComponentVtables">
             <summary>
             Vtables used by the connection when saving and reading snapshots. Separate behavior
             can be specified per component type, per handle type (data, update, command request,
             command response) and per direction (serialization, deserialization).
            </summary>
             <remarks>
             If no vtable is provided for given component, the default vtable will be used instead
             if it is not null, otherwise an error will occur when dealing with that component.
             </remarks>
        </member>
        <member name="F:Improbable.Worker.CInterop.ConnectionParameters.DefaultComponentVtable">
            <summary>
            The default vtable used by Connection when there's no component-specific vtable
            specified.
            </summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.SnapshotParameters.ComponentVtables">
             <summary>
             Vtables used by the connection when saving and reading snapshots. Separate behavior
             can be specified per component type, per handle type (data, update, command request,
             command response) and per direction (serialization, deserialization).
            </summary>
             <remarks>
             If no vtable is provided for given component, the default vtable will be used instead
             if it is not null, otherwise an error will occur when dealing with that component.
             </remarks>
        </member>
        <member name="F:Improbable.Worker.CInterop.SnapshotParameters.DefaultComponentVtable">
            <summary>
            The default vtable used by Connection when there's no component-specific vtable
            specified.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.Query.IConstraint">
            <summary>Base class for entity query constraints.</summary>
        </member>
        <member name="F:Improbable.Worker.CInterop.Query.SnapshotResultType.ComponentIds">
            <summary>
            If nonempty, filters the components returned in the snapshot for each entity.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.SchemaComponentData">
            <summary>
            A wrapper over a raw Schema_ComponentData pointer. Ownership of the memory is transferred
            when this object is passed into any other API. If this object is never passed into an API,
            then <c>.Destroy()</c> must be called explicitly.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaComponentData.#ctor(Improbable.Worker.CInterop.Internal.CSchema.ComponentData*)">
            <exception cref="T:System.ArgumentException">if the handle pointer is null.</exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaComponentData.ApplyComponentUpdate(Improbable.Worker.CInterop.SchemaComponentUpdate)">
             <summary>
             Merges a component update 'update' into this at-rest component data object. This is
             semantically equivalent to a component update being "applied" to the at-rest component data.
            
             This function will mutate this object by appending the bytes representation of the
             update to the end of the component data. This is efficient because if the component update is
             small, it wouldn't need to reshuffle any fields under the hood, but will have unbounded memory
             growth (proportional to the serialized component update after each function call).
            
             To avoid mutating the data and having unbounded memory growth, first create a copy of this
             component data by calling Copy(). Note that calling Copy() on a component data will only
             require storage for the serialized size of the component data in the returned object,
             hence why memory growth is no longer unbounded when this is used.
             </summary>
             <exception cref="T:System.InvalidOperationException">if there's a failure merging the update into this object.</exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.SchemaComponentUpdate">
            <summary>
            A wrapper over a raw Schema_ComponentUpdate pointer. Ownership of the memory is  transferred
            when this object is passed into any other API. If this object is never passed into an API,
            then <c>.Destroy()</c> must be called explicitly.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaComponentUpdate.#ctor(Improbable.Worker.CInterop.Internal.CSchema.ComponentUpdate*)">
            <exception cref="T:System.ArgumentException">if the handle pointer is null.</exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaComponentUpdate.MergeUpdate(Improbable.Worker.CInterop.SchemaComponentUpdate)">
             <summary>
             Merges a component update 'update' into this update. This is semantically equivalent to combining
             two component updates into a single component update such that, when applied to some at-rest
             component data, it will be semantically equivalent to applying this update, followed by 'update'.
            
             The passed in update will become empty once this function is executed, and should be destroyed
             by calling update.Destroy().
             </summary>
             <exception cref="T:System.InvalidOperationException">if there's a failure merging the update into this object.</exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.SchemaCommandRequest">
            <summary>
            A wrapper over a raw Schema_CommandRequest pointer. Ownership of the memory is transferred
            when this object is passed into any other API. If this object is never passed into an API,
            then <c>.Destroy()</c> must be called explicitly.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaCommandRequest.#ctor(Improbable.Worker.CInterop.Internal.CSchema.CommandRequest*)">
            <exception cref="T:System.ArgumentException">if the handle pointer is null.</exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.SchemaCommandResponse">
            <summary>
            A wrapper over a raw Schema_CommandResponse pointer. Ownership of the memory is transferred
            when this object is passed into any other API. If this object is never passed into an API,
            then <c>.Destroy()</c> must be called explicitly.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaCommandResponse.#ctor(Improbable.Worker.CInterop.Internal.CSchema.CommandResponse*)">
            <exception cref="T:System.ArgumentException">if the handle pointer is null.</exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.SchemaObject">
             <summary>
             A wrapper over a raw Schema_Object pointer.
            
             In general, if you try to obtain a value from a field when the field does not exist (or the
             type is incorrect), a default initialized value of that type will be returned. If you try to
             obtain an Object from a field that doesn't exist, it will return a _valid_ SchemaObject
             which is unreachable (so no way to obtain it by calling GetObject(...)). The GetXXCount
             functions can be used to detect this case.
            
             In addition to unsafe GetXXList and AddXXList functions that rely on the caller to provide
             an unmanaged buffer, there are safe wrappers that operate on C# arrays. Note that these are
             slightly less performant as they will make a copy of the data, but it avoids any potential
             lifetime issues.
            
             Note that it is advised not to use this data structure to keep around data in a persistent
             way due to the lack of type checking. Ideally, this should only be used to hold an
             intermediate "serialized" object.
             </summary>
             <remarks>
             SchemaObject is the main type for data manipulation, and roughly-speaking corresponds to an
             instance of a "type" as defined in schema. Each SchemaObject is owned by a "root" schema type
             instance, of which there are four: SchemaCommandRequest, SchemaCommandResponse,
             SchemaComponentData, and SchemaComponentUpdate.
            
             Each field defined in schema has a _field ID_, a  _type_ and an _arity_. For each type, there is
             a family of functions that can be used to read and write fields of that type for a particular
             field ID inside a SchemaObject. The mapping from schema type to function family is given below:
            
                  .schema type | function family
             ------------------|----------------
                         int32 | Int32
                         int64 | Int64
                        uint32 | Uint32
                        uint64 | Uint64
                        sint32 | Sint32
                        sint64 | Sint64
                       fixed32 | Fixed32
                       fixed64 | Fixed64
                      sfixed32 | Sfixed32
                      sfixed64 | Sfixed64
                          bool | Bool
                         float | Float
                        double | Double
                        string | Bytes / String
                      EntityId | EntityId (alias for Int64)
                         bytes | Bytes
             user-defined enum | Enum (alias for Uint32)
             user-defined type | Object
            
             The arity of a field is either singular, option, or list. The same function family can be used
             for manipulating fields of any arity: a singular field is simply a field whose ID occurs exactly
             once; an option field is a field whose ID occurs zero or one times; and a list field is a field
             whose ID occurs any number of times.
            
             Therefore, typically, where X is the function family, we use the GetX and AddX
             functions to read and write singular fields; the GetXCount, GetX and AddX
             functions to read and write option fields, and the GetXCount, IndexX and
             AddX functions to read and write list fields. However, these functions are all
             interopable: internally, GetX just retrieves the last occurence of the given field ID, for
             instance.
            
             Note that for maximum efficiency, fields should be accessed in increasing ID order. If there
             are multiple values in a single field ID (GetXXCount is greater than 1), then they should
             be accessed in increasing index order.
            
             Map fields are represented as lists of Object fields, where each object represents an entry in
             the map, and has the key under field ID 1 (SchemaMapKeyFieldId) and the value under field ID
             2 (SchemaMapValueFieldId).
            
             It is the responsibility of the user to ensure that SchemaObjects are accessed and mutated in a
             way consistent with the schema definitions of their corresponding types. Typically, this is done
             by writing a custom code generator for the schema AST.
            
             </remarks>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaObject.ShallowCopy(Improbable.Worker.CInterop.SchemaObject)">
            <remark>
            If `this == other`, or if the objects are not associated with the same root schema type
            instance (SchemaComponentData, etc), no operation is performed.
            </remark>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaObject.ShallowCopyField(Improbable.Worker.CInterop.SchemaObject,System.UInt32)">
            <remark>
            If `this == other`, or if the objects are not associated with the same root schema type
            instance (SchemaComponentData, etc), no operation is performed.
            </remark>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaObject.MergeFromBuffer(System.Byte*,System.UInt32)">
            <exception cref="T:System.InvalidOperationException">if there's a failure deserializing the buffer.</exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaObject.MergeFromBuffer(System.Byte[])">
            <exception cref="T:System.InvalidOperationException">if there's a failure deserializing the buffer.</exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaObject.Serialize">
            <exception cref="T:System.InvalidOperationException">if there's a failure serializing the object.</exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SchemaObject.GetObject(System.UInt32)">
            <remark>
            Note that the schema library deserializes schema objects lazily, so calling `GetObject`
            can cause more of the buffer to be deserialized, triggering an error. For that reason,
            it is possible for an exception to be thrown.
            </remark>
            <exception cref="T:System.InvalidOperationException">if there's a failure deserializing the buffer.</exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.StreamBadStateException">
            <summary>
            When thrown, this exception signals that an internal stream error occurred and
            the stream is not in a usable state.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.StreamInvalidDataException">
            <summary>
            When thrown, this exception signals that the data processed in the last operation
            was not valid and the operation failed. The stream is still in a usable state.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.SnapshotInputStream.#ctor(System.String,Improbable.Worker.CInterop.SnapshotParameters)">
            <exception cref="T:Improbable.Worker.CInterop.StreamBadStateException">
            The SnapshotInputStream failed to be initialized and is not in a usable state.
            </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SnapshotInputStream.ReadEntity">
            <exception cref="T:Improbable.Worker.CInterop.StreamBadStateException">
            A snapshot internal error has occurred. The stream is not in a usable state.
            </exception>
            <exception cref="T:Improbable.Worker.CInterop.StreamInvalidDataException">
            The last entity read operation on the snapshot stream has failed. The stream is in a
            usable state.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The end of Snapshot was reached while trying to execute the last entity read operation.
            </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SnapshotOutputStream.#ctor(System.String,Improbable.Worker.CInterop.SnapshotParameters)">
            <exception cref="T:Improbable.Worker.CInterop.StreamBadStateException">
            The SnapshotOutputStream failed to be initialized and is not in a usable state.
            </exception>
        </member>
        <member name="M:Improbable.Worker.CInterop.SnapshotOutputStream.WriteEntity(System.Int64,Improbable.Worker.CInterop.Entity)">
            <exception cref="T:Improbable.Worker.CInterop.StreamBadStateException">
            A snapshot internal error has occurred. The stream is not in a usable state.
            </exception>
            <exception cref="T:Improbable.Worker.CInterop.StreamInvalidDataException">
            The last entity write operation on the snapshot stream has failed. The stream is in a
            usable state.
            </exception>
        </member>
        <member name="T:Improbable.Worker.CInterop.Internal.Contract">
            <summary>
            Class providing methods similar to System.Diagnostics.Contract in .NET 4.0.
            </summary>
        </member>
        <member name="M:Improbable.Worker.CInterop.Internal.Contract.Requires``1(System.Boolean,System.String,System.String)">
            <summary>
            Throws the exception <typeparamref name="TException"/> with the parameter paramName
            that caused the exception and the exception message passed to the method if
            <paramref name="condition"/> is false.
            </summary>
        </member>
        <member name="T:Improbable.Worker.CInterop.Internal.MonoPInvokeCallbackAttribute">
            <summary>
            This attribute is valid on static functions and it is used by Mono's
            Ahead of Time Compiler (AOT) to generate the code necessary to support
            native calls back into managed code.
            </summary>
            <remarks>
            Implemented here as a custom attribute as we do not include Xamarin's
            Mono library within the C# Worker SDK layer itself. Based on the official Mono
            implementation.
            See: https://github.com/mono/mono/blob/master/mcs/class/System/Mono.Util/MonoPInvokeCallbackAttribute.cs
            See: https://developer.xamarin.com/api/type/MonoTouch.MonoPInvokeCallbackAttribute/
            </remarks>
        </member>
        <member name="T:Improbable.Worker.CInterop.Internal.ToStringBuilder">
            ToStringBuilder is a utility class to generate json-esque string representations of C# classes.
            One must create an instance of ToStringBuilder, providing the object name as a parameter to the constructor.
            For each field, one must call AddField, providing the name and value of the field.
            Calling Build serializes the object and returns a string representation.
        </member>
    </members>
</doc>
