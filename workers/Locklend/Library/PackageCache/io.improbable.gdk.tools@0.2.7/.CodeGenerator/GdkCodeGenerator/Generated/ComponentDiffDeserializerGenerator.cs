//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Gdk.CodeGenerator {
    using System;
    using Improbable.Gdk.CodeGeneration.Jobs;
    
    
    public partial class ComponentDiffDeserializerGenerator : ComponentDiffDeserializerGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates/ComponentDiffDeserializerGenerator.tt"

    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";

            
            #line default
            #line hidden
            
            #line 10 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( generatedHeader ));
            
            #line default
            #line hidden
            
            #line 10 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("\r\n\r\nusing Improbable.Gdk.Core;\r\nusing Improbable.Worker.CInterop;\r\n\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 15 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( qualifiedNamespace ));
            
            #line default
            #line hidden
            
            #line 15 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("\r\n{\r\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 17 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentDetails.ComponentName ));
            
            #line default
            #line hidden
            
            #line 17 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(@"
    {
        public class DiffComponentDeserializer : IComponentDiffDeserializer
        {
            public uint GetComponentId()
            {
                return ComponentId;
            }

            public void AddUpdateToDiff(ComponentUpdateOp op, ViewDiff diff, uint updateId)
            {
                var update = ");
            
            #line default
            #line hidden
            
            #line 28 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 28 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(".Serialization.DeserializeUpdate(op.Update.SchemaData.Value);\r\n                di" +
                    "ff.AddComponentUpdate(update, op.EntityId, op.Update.ComponentId, updateId);\r\n");
            
            #line default
            #line hidden
            
            #line 30 "Templates/ComponentDiffDeserializerGenerator.tt"
 if (eventDetailsList.Count > 0) { 
            
            #line default
            #line hidden
            
            #line 31 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("                var eventsObject = op.Update.SchemaData.Value.GetEvents();\r\n");
            
            #line default
            #line hidden
            
            #line 32 "Templates/ComponentDiffDeserializerGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";

            
            #line default
            #line hidden
            
            #line 35 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("\r\n                {\r\n                    var eventCount = eventsObject.GetObjectC" +
                    "ount(");
            
            #line default
            #line hidden
            
            #line 37 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventIndex ));
            
            #line default
            #line hidden
            
            #line 37 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(");\r\n                    if (eventCount > 0)\r\n                    {\r\n             " +
                    "           for (uint i = 0; i < eventCount; i++)\r\n                        {\r\n   " +
                    "                         var payload = ");
            
            #line default
            #line hidden
            
            #line 42 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.FqnPayloadType ));
            
            #line default
            #line hidden
            
            #line 42 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(".Serialization.Deserialize(eventsObject.IndexObject(");
            
            #line default
            #line hidden
            
            #line 42 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventIndex ));
            
            #line default
            #line hidden
            
            #line 42 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(", i));\r\n                            var e = new ");
            
            #line default
            #line hidden
            
            #line 43 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 43 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("(payload);\r\n                            diff.AddEvent(e, op.EntityId, op.Update.C" +
                    "omponentId, updateId);\r\n                        }\r\n                    }\r\n      " +
                    "          }\r\n");
            
            #line default
            #line hidden
            
            #line 48 "Templates/ComponentDiffDeserializerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 49 "Templates/ComponentDiffDeserializerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 50 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(@"            }

            public void AddComponentToDiff(AddComponentOp op, ViewDiff diff)
            {
                var data = Serialization.DeserializeUpdate(op.Data.SchemaData.Value);
                diff.AddComponent(data, op.EntityId, op.Data.ComponentId);
            }
        }

        public class ComponentSerializer : IComponentSerializer
        {
            public uint GetComponentId()
            {
                return ComponentId;
            }

            public void Serialize(MessagesToSend messages, SerializedMessagesToSend serializedMessages)
            {
                var storage = messages.GetComponentDiffStorage(ComponentId);

                var updates = ((IDiffUpdateStorage<Update>) storage).GetUpdates();

                for (int i = 0; i < updates.Count; ++i)
                {
                    ref readonly var update = ref updates[i];
                    var schemaUpdate = SchemaComponentUpdate.Create();
                    var componentUpdate = new ComponentUpdate(ComponentId, schemaUpdate);
                    Serialization.SerializeUpdate(update.Update, schemaUpdate);
                    serializedMessages.AddComponentUpdate(componentUpdate, update.EntityId.Id);
                }

");
            
            #line default
            #line hidden
            
            #line 81 "Templates/ComponentDiffDeserializerGenerator.tt"
 if (eventDetailsList.Count > 0) { 
            
            #line default
            #line hidden
            
            #line 82 "Templates/ComponentDiffDeserializerGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";

            
            #line default
            #line hidden
            
            #line 85 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("\r\n                {\r\n                    var events = ((IDiffEventStorage<");
            
            #line default
            #line hidden
            
            #line 87 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 87 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(@">) storage).GetEvents();

                    for (int i = 0; i < events.Count; ++i)
                    {
                        ref readonly var ev = ref events[i];
                        var schemaUpdate = SchemaComponentUpdate.Create();
                        var componentUpdate = new ComponentUpdate(ComponentId, schemaUpdate);
                        var obj = schemaUpdate.GetEvents().AddObject(");
            
            #line default
            #line hidden
            
            #line 94 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventIndex ));
            
            #line default
            #line hidden
            
            #line 94 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(");\r\n                        ");
            
            #line default
            #line hidden
            
            #line 95 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.FqnPayloadType ));
            
            #line default
            #line hidden
            
            #line 95 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write(".Serialization.Serialize(ev.Event.Payload, obj);\r\n                        seriali" +
                    "zedMessages.AddComponentUpdate(componentUpdate, ev.EntityId.Id);\r\n\r\n            " +
                    "        }\r\n                }\r\n");
            
            #line default
            #line hidden
            
            #line 100 "Templates/ComponentDiffDeserializerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 101 "Templates/ComponentDiffDeserializerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 102 "Templates/ComponentDiffDeserializerGenerator.tt"
            this.Write("            }\r\n        }\r\n    }\r\n}\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ComponentDiffDeserializerGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
