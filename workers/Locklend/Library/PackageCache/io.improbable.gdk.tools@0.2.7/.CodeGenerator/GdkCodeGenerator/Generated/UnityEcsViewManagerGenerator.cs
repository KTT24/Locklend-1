//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Gdk.CodeGenerator {
    using System;
    using Improbable.Gdk.CodeGeneration.Jobs;
    
    
    public partial class UnityEcsViewManagerGenerator : UnityEcsViewManagerGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates/UnityEcsViewManagerGenerator.tt"

    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";

            
            #line default
            #line hidden
            
            #line 10 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( generatedHeader ));
            
            #line default
            #line hidden
            
            #line 10 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("\r\n\r\nusing System;\r\nusing Unity.Entities;\r\nusing Improbable.Worker.CInterop;\r\nusin" +
                    "g Improbable.Gdk.Core;\r\n\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 17 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( qualifiedNamespace ));
            
            #line default
            #line hidden
            
            #line 17 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("\r\n{\r\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 19 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentDetails.ComponentName ));
            
            #line default
            #line hidden
            
            #line 19 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("\r\n    {\r\n        public class EcsViewManager : IEcsViewManager\r\n        {\r\n      " +
                    "      private WorkerSystem workerSystem;\r\n            private EntityManager enti" +
                    "tyManager;\r\n            private World world;\r\n\r\n            private readonly Com" +
                    "ponentType[] initialComponents = new ComponentType[]\r\n            {\r\n           " +
                    "     ComponentType.ReadWrite<Component>(),\r\n                ComponentType.ReadWr" +
                    "ite<ComponentAuthority>(),\r\n            };\r\n\r\n            public uint GetCompone" +
                    "ntId()\r\n            {\r\n                return ComponentId;\r\n            }\r\n\r\n   " +
                    "         public ComponentType[] GetInitialComponents()\r\n            {\r\n         " +
                    "       return initialComponents;\r\n            }\r\n\r\n            public void Apply" +
                    "Diff(ViewDiff diff)\r\n            {\r\n                var diffStorage = (DiffCompo" +
                    "nentStorage) diff.GetComponentDiffStorage(ComponentId);\r\n\r\n                forea" +
                    "ch (var entityId in diffStorage.GetComponentsAdded())\r\n                {\r\n      " +
                    "              AddComponent(entityId);\r\n                }\r\n\r\n                var " +
                    "updates = diffStorage.GetUpdates();\r\n                var dataFromEntity = worker" +
                    "System.GetComponentDataFromEntity<Component>();\r\n                for (int i = 0;" +
                    " i < updates.Count; ++i)\r\n                {\r\n                    ApplyUpdate(in " +
                    "updates[i], dataFromEntity);\r\n                }\r\n\r\n                var authChang" +
                    "es = diffStorage.GetAuthorityChanges();\r\n                for (int i = 0; i < aut" +
                    "hChanges.Count; ++i)\r\n                {\r\n                    ref readonly var ch" +
                    "ange = ref authChanges[i];\r\n                    SetAuthority(change.EntityId, ch" +
                    "ange.Authority);\r\n                }\r\n\r\n                foreach (var entityId in " +
                    "diffStorage.GetComponentsRemoved())\r\n                {\r\n                    Remo" +
                    "veComponent(entityId);\r\n                }\r\n            }\r\n\r\n            public v" +
                    "oid Init(World world)\r\n            {\r\n                this.world = world;\r\n     " +
                    "           entityManager = world.EntityManager;\r\n\r\n                workerSystem " +
                    "= world.GetExistingSystem<WorkerSystem>();\r\n\r\n                if (workerSystem =" +
                    "= null)\r\n                {\r\n                    throw new ArgumentException(\"Wor" +
                    "ld instance is not running a valid SpatialOS worker\");\r\n                }\r\n     " +
                    "       }\r\n\r\n            public void Clean(World world)\r\n            {\r\n");
            
            #line default
            #line hidden
            
            #line 87 "Templates/UnityEcsViewManagerGenerator.tt"
 foreach (var fieldDetails in fieldDetailsList) { 
            
            #line default
            #line hidden
            
            #line 88 "Templates/UnityEcsViewManagerGenerator.tt"
 if (!fieldDetails.IsBlittable) { 
            
            #line default
            #line hidden
            
            #line 89 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 89 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 89 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".ReferenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 89 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.PascalCaseName ));
            
            #line default
            #line hidden
            
            #line 89 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("Provider.CleanDataInWorld(world);\r\n");
            
            #line default
            #line hidden
            
            #line 90 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 91 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 92 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("            }\r\n\r\n            private void AddComponent(EntityId entityId)\r\n      " +
                    "      {\r\n                workerSystem.TryGetEntity(entityId, out var entity);\r\n\r" +
                    "\n                var component = new ");
            
            #line default
            #line hidden
            
            #line 98 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 98 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".Component();\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 100 "Templates/UnityEcsViewManagerGenerator.tt"
 foreach (var fieldDetails in fieldDetailsList) { 
            
            #line default
            #line hidden
            
            #line 101 "Templates/UnityEcsViewManagerGenerator.tt"
 if (!fieldDetails.IsBlittable) { 
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("                component.");
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.CamelCaseName));
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("Handle = ");
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".ReferenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.PascalCaseName ));
            
            #line default
            #line hidden
            
            #line 102 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("Provider.Allocate(world);\r\n");
            
            #line default
            #line hidden
            
            #line 103 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 104 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 105 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(@"                component.MarkDataClean();
                entityManager.AddSharedComponentData(entity, ComponentAuthority.NotAuthoritative);
                entityManager.AddComponentData(entity, component);
            }

            private void RemoveComponent(EntityId entityId)
            {
                workerSystem.TryGetEntity(entityId, out var entity);
                entityManager.RemoveComponent<ComponentAuthority>(entity);
");
            
            #line default
            #line hidden
            
            #line 114 "Templates/UnityEcsViewManagerGenerator.tt"
 if (!componentDetails.IsBlittable) { 
            
            #line default
            #line hidden
            
            #line 115 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("\r\n                var data = entityManager.GetComponentData<");
            
            #line default
            #line hidden
            
            #line 116 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 116 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".Component>(entity);\r\n");
            
            #line default
            #line hidden
            
            #line 117 "Templates/UnityEcsViewManagerGenerator.tt"
 foreach (var fieldDetails in fieldDetailsList) { 
            
            #line default
            #line hidden
            
            #line 118 "Templates/UnityEcsViewManagerGenerator.tt"
 if (!fieldDetails.IsBlittable) { 
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("                ");
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".ReferenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.PascalCaseName ));
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("Provider.Free(data.");
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.CamelCaseName ));
            
            #line default
            #line hidden
            
            #line 119 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("Handle);\r\n");
            
            #line default
            #line hidden
            
            #line 120 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 121 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 122 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 123 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("\r\n                entityManager.RemoveComponent<");
            
            #line default
            #line hidden
            
            #line 124 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 124 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(@".Component>(entity);
            }

            private void ApplyUpdate(in ComponentUpdateReceived<Update> update, ComponentDataFromEntity<Component> dataFromEntity)
            {
                workerSystem.TryGetEntity(update.EntityId, out var entity);
                if (!dataFromEntity.Exists(entity))
                {
                    return;
                }

                var data = dataFromEntity[entity];
");
            
            #line default
            #line hidden
            
            #line 136 "Templates/UnityEcsViewManagerGenerator.tt"
 foreach(var fieldDetails in fieldDetailsList) { 
            
            #line default
            #line hidden
            
            #line 137 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write("\r\n                if (update.Update.");
            
            #line default
            #line hidden
            
            #line 138 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.PascalCaseName ));
            
            #line default
            #line hidden
            
            #line 138 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".HasValue)\r\n                {\r\n                    data.");
            
            #line default
            #line hidden
            
            #line 140 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.PascalCaseName ));
            
            #line default
            #line hidden
            
            #line 140 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(" = update.Update.");
            
            #line default
            #line hidden
            
            #line 140 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( fieldDetails.PascalCaseName ));
            
            #line default
            #line hidden
            
            #line 140 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(".Value;\r\n                }\r\n");
            
            #line default
            #line hidden
            
            #line 142 "Templates/UnityEcsViewManagerGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 143 "Templates/UnityEcsViewManagerGenerator.tt"
            this.Write(@"
                data.MarkDataClean();
                dataFromEntity[entity] = data;
            }

            private void SetAuthority(EntityId entityId, Authority authority)
            {
                switch (authority)
                {
                    case Authority.NotAuthoritative:
                    {
                        workerSystem.TryGetEntity(entityId, out var entity);
                        entityManager.SetSharedComponentData(entity, ComponentAuthority.NotAuthoritative);
                        break;
                    }
                    case Authority.Authoritative:
                    {
                        workerSystem.TryGetEntity(entityId, out var entity);
                        entityManager.SetSharedComponentData(entity, ComponentAuthority.Authoritative);
                        break;
                    }
                    case Authority.AuthorityLossImminent:
                        break;
                }
            }
        }
    }
}
");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class UnityEcsViewManagerGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
