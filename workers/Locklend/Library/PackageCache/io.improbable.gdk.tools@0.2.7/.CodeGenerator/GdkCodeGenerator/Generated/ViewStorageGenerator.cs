//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Gdk.CodeGenerator {
    using System;
    using Improbable.Gdk.CodeGeneration.Jobs;
    
    
    public partial class ViewStorageGenerator : ViewStorageGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates/ViewStorageGenerator.tt"

    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var fields = GetFieldDetailsList();

            
            #line default
            #line hidden
            
            #line 8 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( generatedHeader ));
            
            #line default
            #line hidden
            
            #line 8 "Templates/ViewStorageGenerator.tt"
            this.Write("\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing Improbable.Gdk.Core;\r" +
                    "\nusing Improbable.Worker.CInterop;\r\n\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 15 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( qualifiedNamespace ));
            
            #line default
            #line hidden
            
            #line 15 "Templates/ViewStorageGenerator.tt"
            this.Write("\r\n{\r\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 17 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentDetails.ComponentName ));
            
            #line default
            #line hidden
            
            #line 17 "Templates/ViewStorageGenerator.tt"
            this.Write("\r\n    {\r\n        public class ");
            
            #line default
            #line hidden
            
            #line 19 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentDetails.ComponentName ));
            
            #line default
            #line hidden
            
            #line 19 "Templates/ViewStorageGenerator.tt"
            this.Write("ViewStorage : IViewStorage, IViewComponentStorage<Snapshot>,\r\n            IViewCo" +
                    "mponentUpdater<Update>\r\n        {\r\n            private readonly Dictionary<long," +
                    " Authority> authorityStates = new Dictionary<long, Authority>();\r\n            pr" +
                    "ivate readonly Dictionary<long, Snapshot> componentData = new Dictionary<long, S" +
                    "napshot>();\r\n\r\n            public Type GetSnapshotType()\r\n            {\r\n       " +
                    "         return typeof(Snapshot);\r\n            }\r\n\r\n            public Type GetU" +
                    "pdateType()\r\n            {\r\n                return typeof(Update);\r\n            " +
                    "}\r\n\r\n            public uint GetComponentId()\r\n            {\r\n                re" +
                    "turn ComponentId;\r\n            }\r\n\r\n            public bool HasComponent(long en" +
                    "tityId)\r\n            {\r\n                return componentData.ContainsKey(entityI" +
                    "d);\r\n            }\r\n\r\n            public Snapshot GetComponent(long entityId)\r\n " +
                    "           {\r\n                if (!componentData.TryGetValue(entityId, out var c" +
                    "omponent))\r\n                {\r\n                    throw new ArgumentException($" +
                    "\"Entity with Entity ID {entityId} does not have component {typeof(Snapshot)} in " +
                    "the view.\");\r\n                }\r\n\r\n                return component;\r\n          " +
                    "  }\r\n\r\n            public Authority GetAuthority(long entityId)\r\n            {\r\n" +
                    "                if (!authorityStates.TryGetValue(entityId, out var authority))\r\n" +
                    "                {\r\n                    throw new ArgumentException($\"Entity with" +
                    " Entity ID {entityId} does not have component {typeof(Snapshot)} in the view.\");" +
                    "\r\n                }\r\n\r\n                return authority;\r\n            }\r\n\r\n     " +
                    "       public void ApplyDiff(ViewDiff viewDiff)\r\n            {\r\n                " +
                    "var storage = viewDiff.GetComponentDiffStorage(ComponentId);\r\n\r\n                " +
                    "foreach (var entity in storage.GetComponentsAdded())\r\n                {\r\n       " +
                    "             authorityStates[entity.Id] = Authority.NotAuthoritative;\r\n         " +
                    "           componentData[entity.Id] = new Snapshot();\r\n                }\r\n\r\n    " +
                    "            foreach (var entity in storage.GetComponentsRemoved())\r\n            " +
                    "    {\r\n                    authorityStates.Remove(entity.Id);\r\n                 " +
                    "   componentData.Remove(entity.Id);\r\n                }\r\n\r\n                var up" +
                    "dates = ((IDiffUpdateStorage<Update>) storage).GetUpdates();\r\n                fo" +
                    "r (var i = 0; i < updates.Count; i++)\r\n                {\r\n                    re" +
                    "f readonly var update = ref updates[i];\r\n                    ApplyUpdate(update." +
                    "EntityId.Id, in update.Update);\r\n                }\r\n\r\n                var author" +
                    "ityChanges = ((IDiffAuthorityStorage) storage).GetAuthorityChanges();\r\n         " +
                    "       for (var i = 0; i < authorityChanges.Count; i++)\r\n                {\r\n    " +
                    "                var authorityChange = authorityChanges[i];\r\n                    " +
                    "authorityStates[authorityChange.EntityId.Id] = authorityChange.Authority;\r\n     " +
                    "           }\r\n            }\r\n\r\n            public void ApplyUpdate(long entityId" +
                    ", in Update update)\r\n            {\r\n                if (!componentData.TryGetVal" +
                    "ue(entityId, out var data)) \r\n                {\r\n                    return;\r\n  " +
                    "              }\r\n                \r\n");
            
            #line default
            #line hidden
            
            #line 103 "Templates/ViewStorageGenerator.tt"
 foreach (var field in fields) {
    var name = field.PascalCaseName;

            
            #line default
            #line hidden
            
            #line 106 "Templates/ViewStorageGenerator.tt"
            this.Write("\r\n                if (update.");
            
            #line default
            #line hidden
            
            #line 107 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 107 "Templates/ViewStorageGenerator.tt"
            this.Write(".HasValue)\r\n                {\r\n                    data.");
            
            #line default
            #line hidden
            
            #line 109 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 109 "Templates/ViewStorageGenerator.tt"
            this.Write(" = update.");
            
            #line default
            #line hidden
            
            #line 109 "Templates/ViewStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( name ));
            
            #line default
            #line hidden
            
            #line 109 "Templates/ViewStorageGenerator.tt"
            this.Write(".Value;\r\n                }\r\n");
            
            #line default
            #line hidden
            
            #line 111 "Templates/ViewStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 112 "Templates/ViewStorageGenerator.tt"
            this.Write("\r\n                componentData[entityId] = data;\r\n            }\r\n        }\r\n    " +
                    "}\r\n}\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ViewStorageGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
