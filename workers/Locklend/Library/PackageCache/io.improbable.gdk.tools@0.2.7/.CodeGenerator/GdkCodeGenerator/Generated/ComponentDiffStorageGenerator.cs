//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Gdk.CodeGenerator {
    using System;
    using Improbable.Gdk.CodeGeneration.Jobs;
    
    
    public partial class ComponentDiffStorageGenerator : ComponentDiffStorageGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates/ComponentDiffStorageGenerator.tt"

    var fieldDetailsList = GetFieldDetailsList();
    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var eventDetailsList = GetEventDetailsList();

            
            #line default
            #line hidden
            
            #line 9 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( generatedHeader ));
            
            #line default
            #line hidden
            
            #line 9 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n\r\nusing System.Collections.Generic;\r\nusing System;\r\nusing Improbable.Gdk.Core;\r" +
                    "\nusing Improbable.Worker.CInterop;\r\n\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 16 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( qualifiedNamespace ));
            
            #line default
            #line hidden
            
            #line 16 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n{\r\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 18 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentDetails.ComponentName ));
            
            #line default
            #line hidden
            
            #line 18 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n    {\r\n        public class DiffComponentStorage : IDiffUpdateStorage<Update>, " +
                    "IDiffComponentAddedStorage<Update>, IDiffAuthorityStorage\r\n");
            
            #line default
            #line hidden
            
            #line 21 "Templates/ComponentDiffStorageGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";

            
            #line default
            #line hidden
            
            #line 24 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("            , IDiffEventStorage<");
            
            #line default
            #line hidden
            
            #line 24 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 24 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">\r\n");
            
            #line default
            #line hidden
            
            #line 25 "Templates/ComponentDiffStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 26 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(@"        {
            private readonly HashSet<EntityId> entitiesUpdated = new HashSet<EntityId>();

            private List<EntityId> componentsAdded = new List<EntityId>();
            private List<EntityId> componentsRemoved = new List<EntityId>();

            private readonly AuthorityComparer authorityComparer = new AuthorityComparer();
            private readonly UpdateComparer<Update> updateComparer = new UpdateComparer<Update>();

            // Used to represent a state machine of authority changes. Valid state changes are:
            // authority lost -> authority lost temporarily
            // authority lost temporarily -> authority lost
            // authority gained -> authority gained
            // Creating the authority lost temporarily set is the aim as it signifies authority epoch changes
            private readonly HashSet<EntityId> authorityLost = new HashSet<EntityId>();
            private readonly HashSet<EntityId> authorityGained = new HashSet<EntityId>();
            private readonly HashSet<EntityId> authorityLostTemporary = new HashSet<EntityId>();

            private MessageList<ComponentUpdateReceived<Update>> updateStorage =
                new MessageList<ComponentUpdateReceived<Update>>();

            private MessageList<AuthorityChangeReceived> authorityChanges =
                new MessageList<AuthorityChangeReceived>();
");
            
            #line default
            #line hidden
            
            #line 49 "Templates/ComponentDiffStorageGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";

            
            #line default
            #line hidden
            
            #line 52 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n            private MessageList<ComponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 53 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 53 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">> ");
            
            #line default
            #line hidden
            
            #line 53 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 53 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage =\r\n                new MessageList<ComponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 54 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 54 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">>();\r\n\r\n            private readonly EventComparer<");
            
            #line default
            #line hidden
            
            #line 56 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 56 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("> ");
            
            #line default
            #line hidden
            
            #line 56 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 56 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("Comparer =\r\n                new EventComparer<");
            
            #line default
            #line hidden
            
            #line 57 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 57 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">();\r\n");
            
            #line default
            #line hidden
            
            #line 58 "Templates/ComponentDiffStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 59 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n            public Type[] GetEventTypes()\r\n            {\r\n                retur" +
                    "n new Type[]\r\n                {\r\n");
            
            #line default
            #line hidden
            
            #line 64 "Templates/ComponentDiffStorageGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";

            
            #line default
            #line hidden
            
            #line 67 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("                    typeof(");
            
            #line default
            #line hidden
            
            #line 67 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 67 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("),\r\n");
            
            #line default
            #line hidden
            
            #line 68 "Templates/ComponentDiffStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 69 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(@"                };
            }

            public Type GetUpdateType()
            {
                return typeof(Update);
            }

            public uint GetComponentId()
            {
                return ComponentId;
            }

            public void Clear()
            {
                entitiesUpdated.Clear();
                updateStorage.Clear();
                authorityChanges.Clear();
                componentsAdded.Clear();
                componentsRemoved.Clear();
");
            
            #line default
            #line hidden
            
            #line 89 "Templates/ComponentDiffStorageGenerator.tt"
 foreach (var ev in eventDetailsList) {
            
            #line default
            #line hidden
            
            #line 90 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n                ");
            
            #line default
            #line hidden
            
            #line 91 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 91 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage.Clear();\r\n");
            
            #line default
            #line hidden
            
            #line 92 "Templates/ComponentDiffStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 93 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(@"            }

            public void RemoveEntityComponent(long entityId)
            {
                var id = new EntityId(entityId);

                // Adding a component always updates it, so this will catch the case where the component was just added
                if (entitiesUpdated.Remove(id))
                {
                    updateStorage.RemoveAll(update => update.EntityId.Id == entityId);
                    authorityChanges.RemoveAll(change => change.EntityId.Id == entityId);
");
            
            #line default
            #line hidden
            
            #line 104 "Templates/ComponentDiffStorageGenerator.tt"
 foreach (var ev in eventDetailsList) { 
            
            #line default
            #line hidden
            
            #line 105 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("                    ");
            
            #line default
            #line hidden
            
            #line 105 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 105 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage.RemoveAll(change => change.EntityId.Id == entityId);\r\n");
            
            #line default
            #line hidden
            
            #line 106 "Templates/ComponentDiffStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 107 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("                }\r\n\r\n                if (!componentsAdded.Remove(id))\r\n          " +
                    "      {\r\n                    componentsRemoved.Add(id);\r\n                }\r\n    " +
                    "        }\r\n\r\n            public void AddEntityComponent(long entityId, Update co" +
                    "mponent)\r\n            {\r\n                var id = new EntityId(entityId);\r\n     " +
                    "           if (!componentsRemoved.Remove(id))\r\n                {\r\n              " +
                    "      componentsAdded.Add(id);\r\n                }\r\n\r\n                AddUpdate(n" +
                    "ew ComponentUpdateReceived<Update>(component, id, 0));\r\n            }\r\n\r\n       " +
                    "     public void AddUpdate(ComponentUpdateReceived<Update> update)\r\n            " +
                    "{\r\n                entitiesUpdated.Add(update.EntityId);\r\n                update" +
                    "Storage.InsertSorted(update, updateComparer);\r\n            }\r\n\r\n            publ" +
                    "ic void AddAuthorityChange(AuthorityChangeReceived authorityChange)\r\n           " +
                    " {\r\n                if (authorityChange.Authority == Authority.NotAuthoritative)" +
                    "\r\n                {\r\n                    if (authorityLostTemporary.Remove(autho" +
                    "rityChange.EntityId) || !authorityGained.Contains(authorityChange.EntityId))\r\n  " +
                    "                  {\r\n                        authorityLost.Add(authorityChange.E" +
                    "ntityId);\r\n                    }\r\n                }\r\n                else if (au" +
                    "thorityChange.Authority == Authority.Authoritative)\r\n                {\r\n        " +
                    "            if (authorityLost.Remove(authorityChange.EntityId))\r\n               " +
                    "     {\r\n                        authorityLostTemporary.Add(authorityChange.Entit" +
                    "yId);\r\n                    }\r\n                    else\r\n                    {\r\n " +
                    "                       authorityGained.Add(authorityChange.EntityId);\r\n         " +
                    "           }\r\n                }\r\n\r\n                authorityChanges.InsertSorted" +
                    "(authorityChange, authorityComparer);\r\n            }\r\n\r\n            public List<" +
                    "EntityId> GetComponentsAdded()\r\n            {\r\n                return components" +
                    "Added;\r\n            }\r\n\r\n            public List<EntityId> GetComponentsRemoved(" +
                    ")\r\n            {\r\n                return componentsRemoved;\r\n            }\r\n\r\n  " +
                    "          public ReceivedMessagesSpan<ComponentUpdateReceived<Update>> GetUpdate" +
                    "s()\r\n            {\r\n                return new ReceivedMessagesSpan<ComponentUpd" +
                    "ateReceived<Update>>(updateStorage);\r\n            }\r\n\r\n            public Receiv" +
                    "edMessagesSpan<ComponentUpdateReceived<Update>> GetUpdates(EntityId entityId)\r\n " +
                    "           {\r\n                var range = updateStorage.GetEntityRange(entityId)" +
                    ";\r\n                return new ReceivedMessagesSpan<ComponentUpdateReceived<Updat" +
                    "e>>(updateStorage, range.FirstIndex,\r\n                    range.Count);\r\n       " +
                    "     }\r\n\r\n            public ReceivedMessagesSpan<AuthorityChangeReceived> GetAu" +
                    "thorityChanges()\r\n            {\r\n                return new ReceivedMessagesSpan" +
                    "<AuthorityChangeReceived>(authorityChanges);\r\n            }\r\n\r\n            publi" +
                    "c ReceivedMessagesSpan<AuthorityChangeReceived> GetAuthorityChanges(EntityId ent" +
                    "ityId)\r\n            {\r\n                var range = authorityChanges.GetEntityRan" +
                    "ge(entityId);\r\n                return new ReceivedMessagesSpan<AuthorityChangeRe" +
                    "ceived>(authorityChanges, range.FirstIndex, range.Count);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 188 "Templates/ComponentDiffStorageGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";

            
            #line default
            #line hidden
            
            #line 191 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("\r\n            ReceivedMessagesSpan<ComponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 192 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 192 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">> IDiffEventStorage<");
            
            #line default
            #line hidden
            
            #line 192 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 192 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">.GetEvents(EntityId entityId)\r\n            {\r\n                var range = ");
            
            #line default
            #line hidden
            
            #line 194 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 194 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage.GetEntityRange(entityId);\r\n                return new ReceivedMessag" +
                    "esSpan<ComponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 195 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 195 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">>(\r\n                    ");
            
            #line default
            #line hidden
            
            #line 196 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 196 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage, range.FirstIndex, range.Count);\r\n            }\r\n\r\n            Recei" +
                    "vedMessagesSpan<ComponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 199 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 199 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">> IDiffEventStorage<");
            
            #line default
            #line hidden
            
            #line 199 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 199 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">.GetEvents()\r\n            {\r\n                return new ReceivedMessagesSpan<Com" +
                    "ponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 201 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 201 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">>(");
            
            #line default
            #line hidden
            
            #line 201 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 201 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage);\r\n            }\r\n\r\n            void IDiffEventStorage<");
            
            #line default
            #line hidden
            
            #line 204 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 204 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(">.AddEvent(ComponentEventReceived<");
            
            #line default
            #line hidden
            
            #line 204 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 204 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("> ev)\r\n            {\r\n                ");
            
            #line default
            #line hidden
            
            #line 206 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 206 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("EventStorage.InsertSorted(ev, ");
            
            #line default
            #line hidden
            
            #line 206 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.CamelCaseEventName ));
            
            #line default
            #line hidden
            
            #line 206 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("Comparer);\r\n            }\r\n");
            
            #line default
            #line hidden
            
            #line 208 "Templates/ComponentDiffStorageGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 209 "Templates/ComponentDiffStorageGenerator.tt"
            this.Write("        }\r\n    }\r\n}\r\n\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ComponentDiffStorageGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
