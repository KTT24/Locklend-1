//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Improbable.Gdk.CodeGenerator {
    using System;
    using Improbable.Gdk.CodeGeneration.Jobs;
    
    
    public partial class ReactiveComponentGenerator : ReactiveComponentGeneratorBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 3 "Templates/ReactiveComponentGenerator.tt"

    var componentDetails = GetComponentDetails();
    var generatedHeader = CommonGeneratorUtils.GetGeneratedHeader();
    var eventDetailsList = GetEventDetailsList();
    var componentNamespace = $"global::{qualifiedNamespace}.{componentDetails.ComponentName}";

            
            #line default
            #line hidden
            
            #line 9 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( generatedHeader ));
            
            #line default
            #line hidden
            
            #line 9 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@"

#if USE_LEGACY_REACTIVE_COMPONENTS
using System.Collections.Generic;
using Unity.Entities;
using Improbable.Gdk.Core;
using Improbable.Gdk.ReactiveComponents;
using Improbable.Worker.CInterop;

[assembly: RegisterGenericComponentType(typeof(ComponentAdded<");
            
            #line default
            #line hidden
            
            #line 18 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 18 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>))]\r\n[assembly: RegisterGenericComponentType(typeof(ComponentRemoved<");
            
            #line default
            #line hidden
            
            #line 19 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 19 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>))]\r\n[assembly: RegisterGenericComponentType(typeof(AuthorityChanges<");
            
            #line default
            #line hidden
            
            #line 20 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 20 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>))]\r\n[assembly: RegisterGenericComponentType(typeof(Authoritative<");
            
            #line default
            #line hidden
            
            #line 21 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 21 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>))]\r\n[assembly: RegisterGenericComponentType(typeof(NotAuthoritative<");
            
            #line default
            #line hidden
            
            #line 22 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 22 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>))]\r\n[assembly: RegisterGenericComponentType(typeof(AuthorityLossImmin" +
                    "ent<");
            
            #line default
            #line hidden
            
            #line 23 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 23 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>))]\r\n\r\nnamespace ");
            
            #line default
            #line hidden
            
            #line 25 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( qualifiedNamespace ));
            
            #line default
            #line hidden
            
            #line 25 "Templates/ReactiveComponentGenerator.tt"
            this.Write("\r\n{\r\n    public partial class ");
            
            #line default
            #line hidden
            
            #line 27 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentDetails.ComponentName ));
            
            #line default
            #line hidden
            
            #line 27 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@"
    {
        public class UpdateReactiveComponentManager : IReactiveComponentManager
        {
            public void PopulateReactiveComponents(ComponentUpdateSystem updateSystem, EntityManager entityManager, WorkerSystem workerSystem, World world)
            {
                var updatesReceived = updateSystem.GetComponentUpdatesReceived<Update>();

                for (int i = 0; i < updatesReceived.Count; ++i)
                {
                    ref readonly var update = ref updatesReceived[i];
                    if (!workerSystem.TryGetEntity(update.EntityId, out var entity))
                    {
                        continue;
                    }

                    List<Update> updates;
                    if (entityManager.HasComponent<");
            
            #line default
            #line hidden
            
            #line 44 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 44 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".ReceivedUpdates>(entity))\r\n                    {\r\n                        update" +
                    "s = entityManager.GetComponentData<");
            
            #line default
            #line hidden
            
            #line 46 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 46 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@".ReceivedUpdates>(entity).Updates;
                    }
                    else
                    {
                        updates = Update.Pool.Count > 0 ? Update.Pool.Pop() : new List<Update>();
                        var updatesComponent = new ReceivedUpdates
                        {
                            handle = ReferenceTypeProviders.UpdatesProvider.Allocate(world)
                        };
                        ReferenceTypeProviders.UpdatesProvider.Set(updatesComponent.handle, updates);
                        entityManager.AddComponentData(entity, updatesComponent);
                    }

                    updates.Add(update.Update);
                }
            }

            public void Clean(World world)
            {
                ");
            
            #line default
            #line hidden
            
            #line 65 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 65 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".ReferenceTypeProviders.UpdatesProvider.CleanDataInWorld(world);\r\n            }\r\n" +
                    "        }\r\n\r\n        public class AddComponentReactiveComponentManager : IReacti" +
                    "veComponentManager\r\n        {\r\n            public void PopulateReactiveComponent" +
                    "s(ComponentUpdateSystem updateSystem, EntityManager entityManager, WorkerSystem " +
                    "workerSystem, World world)\r\n            {\r\n                var added = updateSys" +
                    "tem.GetComponentsAdded(ComponentId);\r\n\r\n                foreach (var entityId in" +
                    " added)\r\n                {\r\n                    if (!workerSystem.TryGetEntity(e" +
                    "ntityId, out var entity))\r\n                    {\r\n                        contin" +
                    "ue;\r\n                    }\r\n\r\n                    if (entityManager.HasComponent" +
                    "<ComponentRemoved<Component>>(entity))\r\n                    {\r\n                 " +
                    "       entityManager.RemoveComponent<ComponentRemoved<Component>>(entity);\r\n    " +
                    "                }\r\n\r\n                    entityManager.AddComponent(entity, Comp" +
                    "onentType.ReadWrite<ComponentAdded<Component>>());\r\n                }\r\n         " +
                    "   }\r\n\r\n            public void Clean(World world)\r\n            {\r\n            }" +
                    "\r\n        }\r\n\r\n        public class RemoveComponentReactiveComponentManager : IR" +
                    "eactiveComponentManager\r\n        {\r\n            public void PopulateReactiveComp" +
                    "onents(ComponentUpdateSystem updateSystem, EntityManager entityManager, WorkerSy" +
                    "stem workerSystem, World world)\r\n            {\r\n                var removed = up" +
                    "dateSystem.GetComponentsRemoved(ComponentId);\r\n\r\n                foreach (var en" +
                    "tityId in removed)\r\n                {\r\n                    if (!workerSystem.Try" +
                    "GetEntity(entityId, out var entity))\r\n                    {\r\n                   " +
                    "     continue;\r\n                    }\r\n\r\n                    if (entityManager.H" +
                    "asComponent<ComponentAdded<Component>>(entity))\r\n                    {\r\n        " +
                    "                entityManager.RemoveComponent<ComponentAdded<Component>>(entity)" +
                    ";\r\n                    }\r\n\r\n                    entityManager.AddComponent(entit" +
                    "y, ComponentType.ReadWrite<ComponentRemoved<Component>>());\r\n                }\r\n" +
                    "            }\r\n\r\n            public void Clean(World world)\r\n            {\r\n    " +
                    "        }\r\n        }\r\n\r\n        public class AuthorityReactiveComponentManager :" +
                    " IReactiveComponentManager\r\n        {\r\n            public void PopulateReactiveC" +
                    "omponents(ComponentUpdateSystem updateSystem, EntityManager entityManager, Worke" +
                    "rSystem workerSystem, World world)\r\n            {\r\n                var authority" +
                    "Changes = updateSystem.GetAuthorityChangesReceived(ComponentId);\r\n\r\n            " +
                    "    for (int i = 0; i < authorityChanges.Count; ++i)\r\n                {\r\n       " +
                    "             ref readonly var auth = ref authorityChanges[i];\r\n                 " +
                    "   if (!workerSystem.TryGetEntity(auth.EntityId, out var entity))\r\n             " +
                    "       {\r\n                        continue;\r\n                    }\r\n\r\n          " +
                    "          List<Authority> changes;\r\n                    if (entityManager.HasCom" +
                    "ponent<AuthorityChanges<Component>>(entity))\r\n                    {\r\n           " +
                    "             changes = entityManager.GetComponentData<AuthorityChanges<Component" +
                    ">>(entity).Changes;\r\n                    }\r\n                    else\r\n          " +
                    "          {\r\n                        changes = new List<Authority>();\r\n         " +
                    "               var authComponent = new AuthorityChanges<Component>\r\n            " +
                    "            {\r\n                            Handle = AuthorityChangesProvider.All" +
                    "ocate(world)\r\n                        };\r\n                        AuthorityChang" +
                    "esProvider.Set(authComponent.Handle, changes);\r\n                        entityMa" +
                    "nager.AddComponentData(entity, authComponent);\r\n                    }\r\n\r\n       " +
                    "             changes.Add(auth.Authority);\r\n                }\r\n            }\r\n\r\n " +
                    "           public void Clean(World world)\r\n            {\r\n                Author" +
                    "ityChangesProvider.CleanDataInWorld(world);\r\n            }\r\n        }\r\n\r\n");
            
            #line default
            #line hidden
            
            #line 163 "Templates/ReactiveComponentGenerator.tt"
 foreach (var ev in eventDetailsList) {
        var eventType = ev.EventName + ".Event";
        var reactiveType = "ReceivedEvents." + ev.EventName;

            
            #line default
            #line hidden
            
            #line 167 "Templates/ReactiveComponentGenerator.tt"
            this.Write("\r\n        public class ");
            
            #line default
            #line hidden
            
            #line 168 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName));
            
            #line default
            #line hidden
            
            #line 168 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@"EventReactiveComponentManager : IReactiveComponentManager
        {
            public void PopulateReactiveComponents(ComponentUpdateSystem updateSystem, EntityManager entityManager, WorkerSystem workerSystem, World world)
            {
                var eventsReceived = updateSystem.GetEventsReceived<");
            
            #line default
            #line hidden
            
            #line 172 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( eventType ));
            
            #line default
            #line hidden
            
            #line 172 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@">();

                for (int i = 0; i < eventsReceived.Count; ++i)
                {
                    ref readonly var ev = ref eventsReceived[i];
                    if (!workerSystem.TryGetEntity(ev.EntityId, out var entity))
                    {
                        continue;
                    }

                    List<");
            
            #line default
            #line hidden
            
            #line 182 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.FqnPayloadType ));
            
            #line default
            #line hidden
            
            #line 182 "Templates/ReactiveComponentGenerator.tt"
            this.Write("> events;\r\n                    if (entityManager.HasComponent<");
            
            #line default
            #line hidden
            
            #line 183 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( reactiveType ));
            
            #line default
            #line hidden
            
            #line 183 "Templates/ReactiveComponentGenerator.tt"
            this.Write(">(entity))\r\n                    {\r\n                        events = entityManager" +
                    ".GetComponentData<");
            
            #line default
            #line hidden
            
            #line 185 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( reactiveType ));
            
            #line default
            #line hidden
            
            #line 185 "Templates/ReactiveComponentGenerator.tt"
            this.Write(">(entity).Events;\r\n                    }\r\n                    else\r\n             " +
                    "       {\r\n                        events = new List<");
            
            #line default
            #line hidden
            
            #line 189 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.FqnPayloadType ));
            
            #line default
            #line hidden
            
            #line 189 "Templates/ReactiveComponentGenerator.tt"
            this.Write(">();\r\n                        var eventsComponent = new ");
            
            #line default
            #line hidden
            
            #line 190 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( reactiveType ));
            
            #line default
            #line hidden
            
            #line 190 "Templates/ReactiveComponentGenerator.tt"
            this.Write("\r\n                        {\r\n                            handle = ReferenceTypePr" +
                    "oviders.");
            
            #line default
            #line hidden
            
            #line 192 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 192 "Templates/ReactiveComponentGenerator.tt"
            this.Write("Provider.Allocate(world)\r\n                        };\r\n                        Ref" +
                    "erenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 194 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 194 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@"Provider.Set(eventsComponent.handle, events);
                        entityManager.AddComponentData(entity, eventsComponent);
                    }

                    events.Add(ev.Event.Payload);
                }

                var authorityChanges = updateSystem.GetAuthorityChangesReceived(ComponentId);

                for (int i = 0; i < authorityChanges.Count; ++i)
                {
                    ref readonly var auth = ref authorityChanges[i];
                    if (!workerSystem.TryGetEntity(auth.EntityId, out var entity))
                    {
                        continue;
                    }

                    // Add event senders
                    if (auth.Authority == Authority.Authoritative)
                    {
                        var eventSender = new EventSender.");
            
            #line default
            #line hidden
            
            #line 214 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 214 "Templates/ReactiveComponentGenerator.tt"
            this.Write("()\r\n                        {\r\n                            handle = ReferenceType" +
                    "Providers.");
            
            #line default
            #line hidden
            
            #line 216 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 216 "Templates/ReactiveComponentGenerator.tt"
            this.Write("Provider.Allocate(world)\r\n                        };\r\n                        Ref" +
                    "erenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 218 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 218 "Templates/ReactiveComponentGenerator.tt"
            this.Write("Provider.Set(eventSender.handle, new List<");
            
            #line default
            #line hidden
            
            #line 218 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.FqnPayloadType ));
            
            #line default
            #line hidden
            
            #line 218 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@">());
                        entityManager.AddComponentData(entity, eventSender);
                    }

                    // Remove event senders
                    if (auth.Authority == Authority.NotAuthoritative)
                    {
                        var eventSender = entityManager.GetComponentData<EventSender.");
            
            #line default
            #line hidden
            
            #line 225 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 225 "Templates/ReactiveComponentGenerator.tt"
            this.Write(">(entity);\r\n                        ReferenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 226 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 226 "Templates/ReactiveComponentGenerator.tt"
            this.Write("Provider.Free(eventSender.handle);\r\n                        entityManager.RemoveC" +
                    "omponent<EventSender.");
            
            #line default
            #line hidden
            
            #line 227 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 227 "Templates/ReactiveComponentGenerator.tt"
            this.Write(">(entity);\r\n                    }\r\n                }\r\n            }\r\n\r\n          " +
                    "  public void Clean(World world)\r\n            {\r\n                ");
            
            #line default
            #line hidden
            
            #line 234 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 234 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".ReferenceTypeProviders.");
            
            #line default
            #line hidden
            
            #line 234 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( ev.EventName ));
            
            #line default
            #line hidden
            
            #line 234 "Templates/ReactiveComponentGenerator.tt"
            this.Write("Provider.CleanDataInWorld(world);\r\n            }\r\n        }\r\n");
            
            #line default
            #line hidden
            
            #line 237 "Templates/ReactiveComponentGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 238 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@"
        public class LegacyAuthorityComponentManager : IReactiveComponentManager
        {
            public void PopulateReactiveComponents(ComponentUpdateSystem updateSystem, EntityManager entityManager, WorkerSystem workerSystem, World world)
            {
                var authorityChanges = updateSystem.GetAuthorityChangesReceived(ComponentId);

                foreach (var entityId in world.GetExistingSystem<EntitySystem>().GetEntitiesAdded())
                {
                    workerSystem.TryGetEntity(entityId, out var entity);
                    entityManager.AddComponent(entity,
                        ComponentType.ReadWrite<NotAuthoritative<");
            
            #line default
            #line hidden
            
            #line 249 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 249 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@".Component>>());
                }

                for (int i = 0; i < authorityChanges.Count; ++i)
                {
                    ref readonly var auth = ref authorityChanges[i];
                    if (!workerSystem.TryGetEntity(auth.EntityId, out var entity))
                    {
                        continue;
                    }

                    ApplyAuthorityChange(entity, auth.Authority, auth.EntityId, world, entityManager);
                }
            }

            public void Clean(World world)
            {
            }

            private void ApplyAuthorityChange(Unity.Entities.Entity entity, Authority authority, global::Improbable.Gdk.Core.EntityId entityId, World world, EntityManager entityManager)
            {
                switch (authority)
                {
                    case Authority.Authoritative:
                        if (!entityManager.HasComponent<NotAuthoritative<");
            
            #line default
            #line hidden
            
            #line 273 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 273 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@".Component>>(entity))
                        {
                            LogInvalidAuthorityTransition(Authority.Authoritative, Authority.NotAuthoritative, entityId);
                            return;
                        }

                        entityManager.RemoveComponent<NotAuthoritative<");
            
            #line default
            #line hidden
            
            #line 279 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 279 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>>(entity);\r\n                        entityManager.AddComponent(entity," +
                    " ComponentType.ReadWrite<Authoritative<");
            
            #line default
            #line hidden
            
            #line 280 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 280 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>>());\r\n\r\n                        break;\r\n                    case Auth" +
                    "ority.AuthorityLossImminent:\r\n                        if (!entityManager.HasComp" +
                    "onent<Authoritative<");
            
            #line default
            #line hidden
            
            #line 284 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 284 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@".Component>>(entity))
                        {
                            LogInvalidAuthorityTransition(Authority.AuthorityLossImminent, Authority.Authoritative, entityId);
                            return;
                        }

                        entityManager.AddComponent(entity, ComponentType.ReadWrite<AuthorityLossImminent<");
            
            #line default
            #line hidden
            
            #line 290 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 290 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>>());\r\n                        break;\r\n                    case Author" +
                    "ity.NotAuthoritative:\r\n                        if (!entityManager.HasComponent<A" +
                    "uthoritative<");
            
            #line default
            #line hidden
            
            #line 293 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 293 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@".Component>>(entity))
                        {
                            LogInvalidAuthorityTransition(Authority.NotAuthoritative, Authority.Authoritative, entityId);
                            return;
                        }

                        if (entityManager.HasComponent<AuthorityLossImminent<");
            
            #line default
            #line hidden
            
            #line 299 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 299 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>>(entity))\r\n                        {\r\n                            ent" +
                    "ityManager.RemoveComponent<AuthorityLossImminent<");
            
            #line default
            #line hidden
            
            #line 301 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 301 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>>(entity);\r\n                        }\r\n\r\n                        entit" +
                    "yManager.RemoveComponent<Authoritative<");
            
            #line default
            #line hidden
            
            #line 304 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 304 "Templates/ReactiveComponentGenerator.tt"
            this.Write(".Component>>(entity);\r\n                        entityManager.AddComponent(entity," +
                    " ComponentType.ReadWrite<NotAuthoritative<");
            
            #line default
            #line hidden
            
            #line 305 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 305 "Templates/ReactiveComponentGenerator.tt"
            this.Write(@".Component>>());
                        break;
                }
            }

            // todo delete this or fix it
            private void LogInvalidAuthorityTransition(Authority newAuthority, Authority expectedOldAuthority, global::Improbable.Gdk.Core.EntityId entityId)
            {
                // LogDispatcher.HandleLog(LogType.Error, new LogEvent(InvalidAuthorityChange)
                //     .WithField(LoggingUtils.LoggerName, LoggerName)
                //     .WithField(LoggingUtils.EntityId, entityId.Id)
                //     .WithField(""New Authority"", newAuthority)
                //     .WithField(""Expected Old Authority"", expectedOldAuthority)
                //     .WithField(""Component"", """);
            
            #line default
            #line hidden
            
            #line 318 "Templates/ReactiveComponentGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture( componentNamespace ));
            
            #line default
            #line hidden
            
            #line 318 "Templates/ReactiveComponentGenerator.tt"
            this.Write("\")\r\n                // );\r\n            }\r\n        }\r\n    }\r\n}\r\n#endif\r\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class ReactiveComponentGeneratorBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
